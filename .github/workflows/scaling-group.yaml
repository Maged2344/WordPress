name: Deploy to Scaling Group

on:
  push:
    branches:
      - master  # Trigger this workflow on pushes to the main branch

jobs:
  deploy-to-scaling-group:
    runs-on: ubuntu-latest

    steps:
    # Step 1: Set up AWS CLI (for uploading to S3 and scaling group operations)
    - name: Set up AWS CLI
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: 'us-east-1'


    # Step 3: Update Launch Template with New User Data
    - name: Update Launch Template with New User Data
      run: |
        echo "Updating Launch Template with new User Data..."

        # Define the User Data script
        USER_DATA=$(echo '#!/bin/bash
        sudo apt update -y
        sudo apt install awscli -y
        aws s3 cp s3://maged-bucket/$TAR_FILE /home/ubuntu/
        sudo tar -xzf /home/ubuntu/$TAR_FILE -C /var/www/html/wordpress
        sudo systemctl restart nginx
        ' | base64)

        # Create a new version of the Launch Template with updated User Data
        NEW_VERSION=$(aws ec2 create-launch-template-version \
          --launch-template-id lt-00c20bcfeff4c2cd5 \
          --version-description "Updated with latest app build" \
          --source-version 1 \
          --launch-template-data "{\"UserData\": \"$USER_DATA\"}" \
          --query "LaunchTemplateVersion.VersionNumber" \
          --output text)

        echo "Created new Launch Template version: $NEW_VERSION"

    # Step 4: Update Auto Scaling Group to Use New Launch Template Version
    - name: Update Auto Scaling Group
      run: |
        echo "Updating Auto Scaling Group to use new Launch Template version..."

        # Update the Auto Scaling Group to use the new Launch Template version
        aws autoscaling update-auto-scaling-group \
          --auto-scaling-group-name wordpress-scaling \
          --launch-template "LaunchTemplateId=lt-00c20bcfeff4c2cd5,Version=$NEW_VERSION"

        echo "Auto Scaling Group updated successfully."

    # Step 5: Verify Deployment
    - name: Verify Deployment
      run: |
        echo "Waiting for ASG instances to refresh..."
        sleep 120  # Wait for new instances to launch

        echo "Listing instances in ASG..."
        aws autoscaling describe-auto-scaling-instances \
          --query "AutoScalingInstances[*].{InstanceId:InstanceId,State:LifecycleState}" \
          --output table
